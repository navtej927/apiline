version: '3.8'

services:
  news-api:
    build:
      context: .
      dockerfile: packages/news-api/Dockerfile
      target: development
    container_name: apiline-news-api-dev
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - NEWS_API_KEY=${NEWS_API_KEY}
    volumes:
      - ./packages/news-api/src:/app/packages/news-api/src
      - ./packages/news-api/test:/app/packages/news-api/test
      - /app/packages/news-api/node_modules
      - /app/node_modules
    networks:
      - apiline-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching (optional)
  redis:
    image: redis:7.4-alpine
    container_name: apiline-redis
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - apiline-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL database (optional for future use)
  postgres:
    image: postgres:17-alpine
    container_name: apiline-postgres
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-apiline}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_DB=${POSTGRES_DB:-apiline}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - apiline-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-apiline}"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  apiline-network:
    driver: bridge

volumes:
  redis_data:
  postgres_data:
