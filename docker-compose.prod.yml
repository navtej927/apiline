version: '3.8'

services:
  news-api:
    build:
      context: .
      dockerfile: packages/news-api/Dockerfile
      target: production
    container_name: apiline-news-api-prod
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - NEWS_API_KEY=${NEWS_API_KEY}
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://${POSTGRES_USER:-apiline}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-apiline}
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - apiline-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7.4-alpine
    container_name: apiline-redis-prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redispassword}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redispassword}
    volumes:
      - redis_data:/data
    networks:
      - apiline-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redispassword}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:17-alpine
    container_name: apiline-postgres-prod
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-apiline}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_DB=${POSTGRES_DB:-apiline}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - apiline-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-apiline}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: apiline-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - news-api
    networks:
      - apiline-network
    restart: unless-stopped

networks:
  apiline-network:
    driver: bridge

volumes:
  redis_data:
  postgres_data:
